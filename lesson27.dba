`---------------------------
`Limit Rush
`Lesson 27
`---------------------------
`http://www.binarymoon.co.uk
`Ben aka Mop
`---------------------------

`--------
`INCLUDES
`--------
`include the 3d sprite library
#include "sprite.dba"
`include the MatEdit LoadMatrix files
#include "LoadMatrix.dba"

`------
`ARRAYS
`------
`declare the MatEdit variables
Dim BigMatrix(600,600,1)
Dim StartLoc_X(1): Dim StartLoc_Z(1):Dim Info(2)
Dim TArrayX(1): Dim TArrayZ(1): Dim FKey(10,1)
Dim ColData(100): Dim ZoneData(100): Dim Tiles(500,500)
Dim OverTexture$(100): Dim OverName$(20): Dim ReplaceTex(100)
Dim MOffsetX(25): Dim MOffsetY(25)
Dim MWire(20): Dim MGhost(20): Dim Lock(20)
Dim MatX#(20): Dim MatY#(20): Dim MatZ#(20)
Dim MatWidth#(20): Dim MatHeight#(20)
Dim TilesX(20): Dim TilesZ(20)
Dim MatHi#(20): Dim MatLo#(20)

`player arrays
dim xSpeed#(4)
dim ySpeed#(4)
dim zSpeed#(4)
dim friction#(4)
dim movedist#(4)
dim targetCount(4)

`gravity
dim gravity#(0)         : gravity#(0)=0.1

`hotspot data
dim hotspot(0)
dim oldHotspot(0)

`set up the program
sync on
sync rate 40
hide mouse
autocam off

`----------------------
`display company splash
`----------------------
load image "media/binarymoon.jpg",1000
paste image 1000,195,180
sync
sleep 4000
delete image 1000

`set font properties
set text font "verdana"
set text to bold
smalltext=14
bigtext=60

`make the camera small
set camera view 0,0,1,1

`-------------
`level loading
`-------------
`load the matrix
LoadMatrix("map",1)

`temporary load level info
load object "media/arena.x",100
load object "media/arena_light.x",101
sync
load object "media/arena_signs.x",102

`wait key
`add mip-mapping
set matrix texture 1,2,1
set object texture 100,0,1
set object texture 101,2,1

`set fake light properties
set object  101,1,1,0,1,0,0,1
ghost object on 101

`set fog properties
fog on
fog distance 2000
fog color RGB(128,0,0)

`set ambient light amount
set ambient light 10

`colour main light
color light 0,RGB(0,0,160)

`make a light
make light 1
set point light 1,250,200,250
color light 1,RGB(255,255,100)

`-------------------
`display game splash
`-------------------
cls
load image "media/intro.jpg",1000
paste image 1000,120,90
sync
sleep 4000
delete image 1000

`----------------
`sounds and music
`----------------
`load music
load music "media/mindtrick.mid",1
load music "media/pinnacle.mid",2
load music "media/torrent.mid",3

`sound effects
load sound "media/menubeep.wav",1
load 3dsound "media/powerdown.wav",2
load sound "media/beep.wav",3

`load engine sounds
load 3dsound "media/engines.wav",11 : set sound volume 11,50
load 3dsound "media/engines.wav",12 : set sound volume 12,50
load 3dsound "media/engines.wav",13 : set sound volume 13,50
load 3dsound "media/engines.wav",14 : set sound volume 14,50

`--------
`load hud
`--------
`score objects
for i=0 to 10
   load image "media/score"+str$(i)+".jpg",30+i
next i

make_3d_sprite(31,64,64) : position_3d_sprite(31,10,42)
make_3d_sprite(32,64,64) : position_3d_sprite(32,84,42)
make_3d_sprite(33,64,64) : position_3d_sprite(33,158,42)
make_3d_sprite(34,64,64) : position_3d_sprite(34,232,42)

texture object 31,30
texture object 32,30
texture object 33,30
texture object 34,30

ghost object on 31
ghost object on 32
ghost object on 33
ghost object on 34

`name tags
make_3d_sprite(41,64,32) : position_3d_sprite(41,10,10)
make_3d_sprite(42,64,32) : position_3d_sprite(42,84,10)
make_3d_sprite(43,64,32) : position_3d_sprite(43,158,10)
make_3d_sprite(44,64,32) : position_3d_sprite(44,232,10)

for i=1 to 4
   load image "media/name"+str$(i)+".jpg",40+i
   texture object 40+i,40+i
   ghost object on 40+i

   next i

`win - lose panels
make_3d_sprite(51,256,64) : position_3d_sprite(51,374,406)
ghost object on 51
hide object 51

load image "media/win.jpg",51
load image "media/lose.jpg",52

`--------------------
`load a target object
`--------------------
load object "media/light_beam.x",200
load object "media/light_beam2.x",201

make object plain 202,175,175
load image "media/light_3.jpg",1
texture object 202,1
set object rotation zyx 202

ghost object on 200
ghost object on 201
ghost object on 202

set object  200,1,1,0,1,0,0,1
set object  201,1,1,0,1,0,0,1
set object  202,1,1,0,1,0,0,1

`target light
make light 3
set point light 3,0,0,0
color light 3,RGB(0,128,255)
set light range 3,1000

`------------------
`turn off collision
`------------------
set object collision off 200
set object collision off 201
set object collision off 202

set object collision off 100
set object collision off 101

`--------------
`player loading
`--------------
restore data_player_positions

for id=1 to 4
   make object cube id,1
   hide limb id,0
   textureName$="media/hovercraft_"+str$(id)+".jpg"

   load object "media/hovercraft.x",10+id


   load image textureName$,1

   texture object 10+id,1
   scale object 10+id,220,220,220
   set object texture 10+id,0,1

   glue object to limb 10+id,id,0

   make object collision box id,-4,0,-4,4,4,4,0
`sync
next id

gosub main_menu

`---------
`MAIN LOOP
`---------
main:

   restore data_player_positions

   `-----------------------
   `reset player properties
   `-----------------------
   for id=1 to 4
      `work out position
      read xPos#
      read zPos#
      yPos#=get ground height(1,xPos#,zPos#)

      `work out angle
      read yAng

      `update the player position
      position object id,xPos#,yPos#,zPos#
      rotate object id,0,0,0
      rotate object id+10,0,0,0
      yrotate object id,yAng

      read friction#(id)
      read moveDist#(id)
      xSpeed#(id)=0
      zSpeed#(id)=0
      ySpeed#(id)=0

      `reset target count
      targetCount(id)=0

      `reset score board
      texture object id+30,30

      `start the sounds playing
      loop sound id+10
      position sound id+10,xPos#,yPos#,zPos#
   next id

   hide object 51

   `reset screen
   set camera view 0,0,640,480

   `---------------------------------
   `reset target then introduce level
   `---------------------------------
   new_target()
   gosub intro

do

   `get keyboard input for movement
   if upkey()=1 then forward=1 else forward=0
   if downkey()=1 then backward=1 else backward=0
   if leftkey()=1 then left=1 else left=0
   if rightkey()=1 then right=1 else right=0

   if returnkey()=1 then gosub player_win
   if shiftkey()=1 then gosub player_lose

   `update the player
   move_player(1,forward,backward,left,right)

   for id=2 to 4
      control_player(id)
   next id

   `update the camera
   chase_cam(1)

   for id=1 to 4
      if checkHotspot(id)=hotSpot(0)
         `create a new target
         new_target()

         `update the score
         targetCount(id)=targetCount(id)+1
         texture object 30+id,30+targetCount(id)

         `check to see if the competition has ended
         if targetCount(id)=10
            if id=1 then gosub player_win else gosub player_lose
         endif
      endif

   next id

   `update listener
   position listener camera position x(),camera position y(),camera position z()
   rotate listener camera angle x(),camera angle y(),camera angle z()

   gosub update_target
   gosub update_collision

   `update the screen
   sync

loop

main_menu:

   `stop music
   if music playing(1)=1 then stop music 1
   if music playing(2)=1 then stop music 2
   if music playing(3)=1 then stop music 3

   if sound playing(11)=1 then stop sound 11
   if sound playing(12)=1 then stop sound 12
   if sound playing(13)=1 then stop sound 13
   if sound playing(14)=1 then stop sound 14

   `load menu image
   load image "media/title.jpg",1000
   set text size 12

   blue=RGB(0,128,255)
   white=RGB(255,255,255)

   set camera view 0,0,1,1

   selected_Item=1

   hold=1

   do
      cls
      paste image 1000,0,300

      `print menu items
      if selected_Item=1 then ink blue,0 else ink white,0
      text 300,350,"Play Game"

      if selected_Item=2 then ink blue,0 else ink white,0
      text 400,350,"Instructions"

      if selected_Item=3 then ink blue,0 else ink white,0
      text 500,350,"About"

      if selected_Item=4 then ink blue,0 else ink white,0
      text 600,350,"Exit"

      `select menu items
      if leftkey()=1 and hold=0 then dec selected_Item : hold=1
      if rightkey()=1 and hold=0 then inc selected_Item : hold=1

      if scancode()=0 then hold=0

      if selected_Item>4 then selected_Item=1
      if selected_Item<1 then selected_ITem=4

      `choose what to do when an item is selected
      if returnkey()=1 and hold=0
         hold=1

         play sound 1

         `play game
         if selected_Item=1 then goto main

         `display instructions
         if selected_Item=2
            load image "media/instructions.jpg",1001
            paste image 1001,64,32

            sync : sync

            suspend()

            `clear up after myself
            delete image 1001

         endif

         `display information about the game
         if selected_Item=3
            load image "media/about.jpg",1001
            paste image 1001,64,32

            sync : sync

            suspend()

            `clear up after myself
            delete image 1001

         endif

         `quit the game
         if selected_Item=4
            cls

            paste image 1000,0,300

            load image "media/quit.jpg",1001
            paste image 1001,64,32

            sync : sync

            sleep 4000

            `quit the game
            end

         endif
      endif

      sync
   loop

return

`------------------------------
`custom suspend for key command
`------------------------------
function suspend()

   hold=1

   repeat
      if scancode()=0 then hold=0
   until scancode()<>0 and hold=0

endfunction

`player lose routine
player_lose:

   `music commands
   stop music 1
   loop music 3

   show object 51
   texture object 51,52

   set text size smalltext

   hold=1

   do
      `update player properties
      for id=1 to 4
         control_player(id)

         if checkHotspot(id)=hotSpot(0) then new_target()
      next id

      `update camera
      xCamPos#=curvevalue(250,camera position x(),50)
      yCamPos#=curvevalue(100,camera position y(),50)
      zCamPos#=curvevalue(250,camera position z(),50)

      position camera xCamPos#,yCamPos#,zCamPos#
      point camera object position x(1),object position y(1),object position z(1)

      gosub update_target
      gosub update_collision

      center_write(screen width()/2,screen height()/2,"Press any key to continue")

      if scancode()<>0 and hold=0 then goto main_menu
      if scancode()=0 then hold=0

      sync
   loop

return

`player win routine
player_win:

   stop music 1
   loop music 2

   show object 51
   texture object 51,51

   set text size smalltext

   yang=object angle y(1)

   hold=1

   do
      `update player properties
      for id=1 to 4
         control_player(id)

         if checkHotspot(id)=hotSpot(0) then new_target()
      next id

      `update camera
      yang=yang+2

      xCamPos#=newxvalue(object position x(1),yAng,25)
      zCamPos#=newzvalue(object position z(1),yAng,25)

      `camera collision
      if xCamPos#>499 then xCamPos#=499
      if zCamPos#>499 then zCamPos#=499
      if xCamPos#<1 then XCamPos#=1
      if zCamPos#<1 then zCamPos#=1

      yCamPos#=get ground height(1,xCamPos#,zCamPos#)+3

      position camera xCamPos#,yCamPos#,zCamPos#
      point camera object position x(1),object position y(1)+2,object position z(1)

      gosub update_target
      gosub update_collision

      center_write(screen width()/2,screen height()/2,"Press any key to continue")

      if scancode()<>0 and hold=0 then goto main_menu
      if scancode()=0 then hold=0

      sync
   loop

return

`introduction routine
intro:

   `get initial variables
   x#=object position x(1)
   y#=object position y(1)+5
   z#=object position z(1)
   yAng#=wrapvalue(object angle y(1)+180)

   targetX#=newxvalue(object position x(1),yAng#,15)
   targetZ#=newzvalue(object position z(1),yAng#,15)
   targetY#=get ground height(1,targetX#,targetZ#)+10

   camX#=475
   camY#=250
   camZ#=425

   `initial camera position
   position camera camX#,camY#,camZ#
   point camera x#,y#,z#

   counter=0

   `pause to set the scene
   do

      `count time elapsed
      inc counter
      if counter=60 then exit

      `update world
      gosub update_target

      `update listener
      position listener camera position x(),camera position y(),camera position z()
      rotate listener camera angle x(),camera angle y(),camera angle z()

      sync

   loop

   counter=0

   `smooth move to the players position
   do

      `count time elapsed
      inc counter
      if counter=120 then exit

      `work out camera position
      camX#=curvevalue(targetX#,camX#,19)
      camY#=curvevalue(targetY#,camY#,19)
      camZ#=curvevalue(targetZ#,camZ#,19)

      `update camera position
      position camera camX#,camY#,camZ#
      point camera x#,y#,z#

      `update listener
      position listener camera position x(),camera position y(),camera position z()
      rotate listener camera angle x(),camera angle y(),camera angle z()

      `update world
      gosub update_target
      sync

   loop

   counter=0

   set text size bigtext

   `count down
   do

      `count time elapsed
      inc counter
      if counter=120 then exit

      `display count down
      if counter>0 and counter<=40 then center_write(screen width()/2, (screen height()/2)-30,"3")
      if counter>40 and counter<=80 then center_write(screen width()/2, (screen height()/2)-30,"2")
      if counter>80 and counter<=120 then center_write(screen width()/2, (screen height()/2)-30,"1")

      if counter=1 then play sound 3
      if counter=40 then play sound 3
      if counter=80 then play sound 3

      `update world
      gosub update_target
      sync

   loop

   `start competition
   loop music 1

return

`update the collision data
update_collision:

   for id=1 to 4
      xPos#=object position x(id)
      yPos#=object position y(id)
      zPos#=object position z(id)

      _collision=object collision(id,0)

      if _collision>0
         xPos#=xPos#-(get object collision x()/2)
         zPos#=zPos#-(get object collision z()/2)
      endif

      Position object id,xPos#,yPos#,zPos#
   next id

return

`animate the target object
update_target:

   yrotate object 200,wrapvalue(object angle y(200)+2)
   yrotate object 201,wrapvalue(object angle y(201)-2)

   point object 202,camera position x(),camera position y(),camera position z()

return

`-----------------------
`artificial intelligence
`-----------------------
function control_player(id)

   `get positions
   xPos#=object position x(id)
   zPos#=object position z(id)

   yAng=object angle y(id)

   `set movement values
   left=0
   right=0
   forward=1
   backward=0

   `work out target position
   targetXPos=(FKey(hotspot(0),0)*info(0))-(info(0)/2)
   targetZPos=(Fkey(hotspot(0),1)*info(1))-(info(1)/2)

   `work out angle between payer and target
   angle#=atanfull(xPos#-targetXPos,zPos#-targetZPos)-yAng

   `work out direction to turn
   if angle#<-180
      left=1
   else
      right=1
   endif

   move_player(id,forward,backward,left,right)

endfunction

`--------------------------
`pick a new target location
`--------------------------
function new_target()

   `get light position
   xPos=object position x(200)
   yPos=object position y(200)
   zPos=object position z(200)

   `play light sound
   position sound 2,xPos,yPos,zPos
   play sound 2

   repeat
      hotSpot(0)=rnd(7)+1
   until hotspot(0)<>oldHotspot(0)

   oldHotspot(0)=hotspot(0)

   xPos=(FKey(hotspot(0),0)*info(0))-(info(0)/2)
   zPos=(Fkey(hotspot(0),1)*info(1))-(info(1)/2)

   yPos=get ground height(1,xPos,zPos)

   position object 200,xPos,yPos,zPos
   position object 201,xPos,yPos,zPos
   position object 202,xPos,yPos,zPos

   position light 3,xPos,yPos+5,zPos



endfunction

`---------
`chase cam
`---------
function chase_cam(id)

   `work out the angle of the object being chased
   yAng#=wrapvalue(object angle y(id)+180)

   `grab the cameras current position
   xPos#=object position x(id)
   yPos#=object position y(id)
   zPos#=object position z(id)

   `other variables
   camDist=15
   camHeight=3

   `work out new position
   xCamPos#=newxvalue(xPos#,yAng#,camDist)
   zCamPos#=newZvalue(zPos#,yAng#,camDist)

   `camera collision
   if xCamPos#>499 then xCamPos#=499
   if zCamPos#>499 then zCamPos#=499
   if xCamPos#<1 then XCamPos#=1
   if zCamPos#<1 then zCamPos#=1

   `work out camera height
   yCamPos#=get ground height(1,xCamPos#,zCamPos#)+camHeight
   if yCamPos#<yPos#+camHeight then yCamPos#=yPos#+camHeight

   xCamPos#=curvevalue(xCamPos#,camera position x(),4)
   yCamPos#=curvevalue(yCamPos#,camera position y(),4)
   zCamPos#=curvevalue(zCamPos#,camera position z(),4)

   `update camera position
   position camera xCamPos#,yCamPos#,zCamPos#
   point camera xPos#,yPos#+camHeight,zPos#

endfunction

`-------------------------
`move the specified player
`-------------------------
function move_player(id,forward, backward, left, right)

   `----------------------------------
   `get the required object properties
   `----------------------------------
   xPos#=object position x(id)
   yPos#=object position y(id)
   zPos#=object position z(id)
   yAng#=object angle y(id)

   `-----------------------
   `sort out basic movement
   `-----------------------
   `apply forward movement
   if forward=1
      xSpeed#(id)=xSpeed#(id)+newxvalue(0,yAng#,moveDist#(id))
      zSpeed#(id)=zSpeed#(id)+newzvalue(0,yAng#,moveDist#(id))
   endif

   `apply backward movement
   if backward=1
      xSpeed#(id)=xSpeed#(id)+newxvalue(0,yAng#,moveDist#(id)*-1)
      zSpeed#(id)=zSpeed#(id)+newzvalue(0,yAng#,moveDist#(id)*-1)
   endif

   `apply left rotation
   if left=1
      yrotate object id,wrapvalue(yAng#-4)
   endif

   `apply right rotation
   if right=1
      yrotate object id,wrapvalue(yAng#+4)
   endif

   `--------------------------------------------------
   `sort out friction and other physics related things
   `--------------------------------------------------
   `work out value with friction
   xSpeed#(id)=xSpeed#(id)*friction#(id)
   zSpeed#(id)=zSpeed#(id)*friction#(id)

   `add gravity value
   ySpeed#(id)=ySpeed#(id)+gravity#(0)

   `work out the new position
   xPos#=xPos#+xSpeed#(id)
   zPos#=zPos#+zSpeed#(id)
   yPos#=yPos#-ySpeed#(id)

   `collision
   if xPos#>495 then xPos#=495
   if zPos#>495 then zPos#=495
   if xPos#<5 then XPos#=5
   if zPos#<5 then zPos#=5

   `work out the height of the character
   if yPos#<get ground height(1,xPos#,zPos#)

      ySpeed#(id)=ySpeed#(id)+(yPos#-get ground height(1,xPos#,zPos#))
      yPos#=get ground height(1,xPos#,zPos#)

      `------------------------------
      `tilt the vehicle to the ground
      `------------------------------
      distVal#=1.2

      `work out the positions of the front, back, left and right of the vehicle
      ang#=yAng#      : frontX#=newxvalue(xPos#,ang#,distVal#)  : frontZ#=newzvalue(zPos#,ang#,distVal#)
      ang#=yAng#+180  : backX#=newxvalue(xPos#,ang#,distVal#)   : backZ#=newzvalue(zPos#,ang#,distVal#)
      ang#=yAng#+90   : leftX#=newxvalue(xPos#,ang#,distVal#)   : leftZ#=newzvalue(zPos#,ang#,distVal#)
      ang#=yAng#-90   : rightX#=newxvalue(xPos#,ang#,distVal#)  : rightZ#=newzvalue(zPos#,ang#,distVal#)

      `work out the different heights
      frontHeight#=get ground height(1,frontX#,frontZ#)
      backHeight#=get ground height(1,backX#,backZ#)
      leftHeight#=get ground height(1,leftX#,leftZ#)
      rightHeight#=get ground height(1,rightX#,rightZ#)

      `work out tilt values
      xAng#=curveangle((backHeight#-frontHeight#)*30,object angle x(id+10),5)
      zAng#=curveangle((leftHeight#-rightHeight#)*30,object angle z(id+10),5)

      `update the vehicle rotation
      rotate object id+10,xAng#,0,zAng#

      `-----------------
      `slide down slopes
      `-----------------
      xMoveDist#=(backHeight#-frontHeight#)/30
      zMoveDist#=(leftHeight#-rightHeight#)/30

      `adjust forward/ backward momentum
      xSpeed#(id)=xSpeed#(id)+newxvalue(0,yAng#,xMoveDist#)
      zSpeed#(id)=zSpeed#(id)+newzvalue(0,yAng#,xMoveDist#)

      `adjust left/ right momentum
      xSpeed#(id)=xSpeed#(id)+newxvalue(0,yAng#-90,zMoveDist#)
      zSpeed#(id)=zSpeed#(id)+newzvalue(0,yAng#-90,zMoveDist#)

   endif

   `reposition the player object
   position object id,xPos#,yPos#,zPos#
   position sound id+10,xPos#,yPos#,zPos#

endfunction

`-------------------------------------------------------
`work out what hotspot the current object is on (if any)
`-------------------------------------------------------
function CheckHotspot(id)

   `reset current hotspot
   currentHotspot=0

   `work out curret tile position
   tileX=int(object position x(id)/Info(0))+1
   tileZ=int(object position z(id)/Info(1))+1

   `find current hotspot
   For hotSpot=1 to 10
      if tileX=FKey(hotSpot,0) and tileZ=FKey(hotSpot,1) then currentHotspot=hotSpot : Exit
   Next hotSpot

endfunction currentHotspot

`---------------------------------------------
`write text to screen with a border (centered)
`---------------------------------------------
function center_write(x,y,string$)

   ink RGB(0,128,255),0

   `draw outline
   center text x+1,y+1,string$
   center text x-1,y-1,string$
   center text x+1,y-1,string$
   center text x-1,y+1,string$

   ink rgb(255,255,255),0

   `draw actual letter/number
   center text x,y,string$

endfunction

`---------------
`data statements
`---------------
data_player_positions:

`value 1 = x position
`value 2 = z position
`value 3 = y angle
`value 4 = friction
`value 5 = move distance

data 262.5,212.5,0,0.97,0.065
data 212.5,262.5,90,0.985,0.04
data 262.5,312.5,180,0.975,0.06
data 312.5,262.5,270,0.965,0.07
